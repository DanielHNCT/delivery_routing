package com.daniel.deliveryrouting.data.repository

import android.content.Context
import android.util.Log
import com.daniel.deliveryrouting.data.api.ColisTokenApi
import com.daniel.deliveryrouting.data.api.models.ColisAuthResponse
import com.daniel.deliveryrouting.data.api.models.ColisTokenLoginRequest
import com.daniel.deliveryrouting.data.api.models.RefreshTokenRequest
import com.daniel.deliveryrouting.data.api.models.TourneeRequest
import com.daniel.deliveryrouting.data.api.models.TourneeResponse
import com.daniel.deliveryrouting.data.token.ColisTokenManager
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.util.UUID

/**
 * üéØ REPOSITORY COMPLETO CON AUTO-RETRY Y MANEJO DE TOKENS
 * 
 * Funcionalidades implementadas:
 * - ‚úÖ Autenticaci√≥n con guardado de tokens
 * - ‚úÖ Refresh autom√°tico en 401
 * - ‚úÖ Retry logic con m√°ximo 2 intentos
 * - ‚úÖ Manejo de estados de loading
 * - ‚úÖ Logging detallado para debugging
 */
class ColisTokenRepository(
    private val api: ColisTokenApi,
    private val tokenManager: ColisTokenManager
) {
    
    companion object {
        private const val TAG = "ColisTokenRepository"
        private const val MAX_RETRIES = 2
    }
    
    /**
     * üîê AUTENTICACI√ìN COMPLETA DEL USUARIO
     */
    suspend fun authenticateUser(
        username: String, 
        password: String, 
        societe: String
    ): Result<ColisAuthResponse> = withContext(Dispatchers.IO) {
        
        try {
            Log.d(TAG, "üîê === INICIANDO AUTENTICACI√ìN COMPLETA ===")
            Log.d(TAG, "Username: $username")
            Log.d(TAG, "Societe: $societe")
            Log.d(TAG, "Password length: ${password.length}")
            
            val activityId = UUID.randomUUID().toString()
            Log.d(TAG, "ActivityId: $activityId")
            
            val request = ColisTokenLoginRequest(username, password, societe)
            Log.d(TAG, "Request object: $request")
            
            val response = api.login(request, activityId)
            Log.d(TAG, "üì• Login Response Status: ${response.code()}")
            Log.d(TAG, "üì• Login Response Headers: ${response.headers()}")
            
            if (response.isSuccessful) {
                val authResponse = response.body()
                if (authResponse != null && authResponse.isAuthentif) {
                    
                    // Guardar tokens localmente
                    tokenManager.saveTokens(authResponse)
                    
                    Log.d(TAG, "‚úÖ === AUTENTICACI√ìN EXITOSA ===")
                    Log.d(TAG, "üîë Token guardado: ${authResponse.tokens.ssoHopps.take(50)}...")
                    Log.d(TAG, "üîë Short Token: ${authResponse.shortToken.ssoHopps.take(50)}...")
                    Log.d(TAG, "üë§ Matricule: ${authResponse.matricule}")
                    Log.d(TAG, "üè¢ Soci√©t√©: ${authResponse.societe}")
                    Log.d(TAG, "üë§ Nom: ${authResponse.nom}")
                    Log.d(TAG, "üë§ Pr√©nom: ${authResponse.prenom}")
                    Log.d(TAG, "=== FIN AUTENTICACI√ìN ===")
                    
                    Result.success(authResponse)
                } else {
                    Log.e(TAG, "‚ùå Autenticaci√≥n fall√≥: isAuthentif = false")
                    Log.e(TAG, "Response: $authResponse")
                    Result.failure(Exception("Authentication failed: Invalid credentials"))
                }
            } else {
                val errorBody = response.errorBody()?.string()
                Log.e(TAG, "‚ùå Login request fall√≥: ${response.code()} - $errorBody")
                Result.failure(Exception("Login failed: ${response.code()} - $errorBody"))
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error en autenticaci√≥n: ${e.message}", e)
            Result.failure(e)
        }
    }
    
    /**
     * üîÑ REFRESH AUTOM√ÅTICO DE TOKEN
     */
    suspend fun refreshTokenIfNeeded(): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîÑ === VERIFICANDO NECESIDAD DE REFRESH ===")
            
            // Verificar si tenemos token v√°lido
            val currentToken = tokenManager.getValidToken()
            if (currentToken != null) {
                Log.d(TAG, "‚úÖ Token actual a√∫n v√°lido")
                return@withContext Result.success(currentToken)
            }
            
            // Necesitamos refresh - obtener token anterior para refresh
            val oldToken = tokenManager.getTokenForRefresh()
            if (oldToken == null) {
                Log.w(TAG, "‚ùå No hay token para refresh - necesita login completo")
                return@withContext Result.failure(Exception("No token available for refresh"))
            }
            
            Log.d(TAG, "üîÑ Haciendo refresh token...")
            val activityId = UUID.randomUUID().toString()
            val refreshRequest = RefreshTokenRequest(token = oldToken)
            val response = api.refreshToken(refreshRequest, activityId)
            
            Log.d(TAG, "üì• Refresh Response Status: ${response.code()}")
            
            if (response.isSuccessful) {
                val refreshResponse = response.body()
                if (refreshResponse != null && refreshResponse.isAuthentif) {
                    
                    // Guardar nuevo token
                    tokenManager.saveTokens(refreshResponse)
                    
                    Log.d(TAG, "‚úÖ === TOKEN REFRESH EXITOSO ===")
                    Log.d(TAG, "üîë Nuevo token: ${refreshResponse.tokens.ssoHopps.take(50)}...")
                    Log.d(TAG, "üîë Nuevo short token: ${refreshResponse.shortToken.ssoHopps.take(50)}...")
                    Log.d(TAG, "=== FIN REFRESH ===")
                    
                    Result.success(refreshResponse.tokens.ssoHopps)
                } else {
                    Log.e(TAG, "‚ùå Refresh fall√≥: isAuthentif = false")
                    tokenManager.clearTokens() // Limpiar tokens inv√°lidos
                    Result.failure(Exception("Token refresh failed"))
                }
            } else {
                val errorBody = response.errorBody()?.string()
                Log.e(TAG, "‚ùå Refresh request fall√≥: ${response.code()} - $errorBody")
                tokenManager.clearTokens() // Limpiar tokens inv√°lidos
                Result.failure(Exception("Refresh failed: ${response.code()} - $errorBody"))
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error en refresh token: ${e.message}", e)
            Result.failure(e)
        }
    }
    
    /**
     * üöö OBTENER TOURN√âE CON AUTO-RETRY Y MANEJO DE TOKENS
     */
    suspend fun getTourneeData(
        username: String,
        password: String,
        societe: String,
        date: String,
        matricule: String,
        maxRetries: Int = MAX_RETRIES
    ): Result<TourneeResponse> = withContext(Dispatchers.IO) {
        
        var attempt = 1
        
        while (attempt <= maxRetries) {
            try {
                Log.d(TAG, "üöö === OBTENIENDO TOURN√âE (Intento $attempt/$maxRetries) ===")
                Log.d(TAG, "Username: $username")
                Log.d(TAG, "Date: $date")
                Log.d(TAG, "Matricule: $matricule")
                
                // Obtener token v√°lido (refresh autom√°tico si es necesario)
                val tokenResult = refreshTokenIfNeeded()
                if (tokenResult.isFailure) {
                    Log.e(TAG, "‚ùå No se pudo obtener token v√°lido")
                    return@withContext Result.failure(tokenResult.exceptionOrNull() ?: Exception("Token unavailable"))
                }
                
                val token = tokenResult.getOrThrow()
                Log.d(TAG, "üîë Token v√°lido obtenido: ${token.take(50)}...")
                
                // Hacer request de tourn√©e
                val tourneeRequest = TourneeRequest(
                    username = username,
                    password = password,
                    societe = societe,
                    date = date,
                    matricule = matricule,
                    token = token
                )
                
                val activityId = UUID.randomUUID().toString()
                Log.d(TAG, "üì± Enviando request tourn√©e con token: ${token.take(50)}...")
                Log.d(TAG, "ActivityId: $activityId")
                
                val response = api.getTourneeWithRetry(tourneeRequest, activityId)
                
                Log.d(TAG, "üì• Tourn√©e Response Status: ${response.code()}")
                Log.d(TAG, "üì• Tourn√©e Response Headers: ${response.headers()}")
                
                when {
                    response.isSuccessful -> {
                        val tourneeData = response.body()
                        Log.d(TAG, "‚úÖ === TOURN√âE OBTENIDA EXITOSAMENTE ===")
                        Log.d(TAG, "Success: ${tourneeData?.success}")
                        Log.d(TAG, "Message: ${tourneeData?.message}")
                        Log.d(TAG, "Packages count: ${tourneeData?.data?.packages?.size ?: 0}")
                        Log.d(TAG, "=== FIN TOURN√âE ===")
                        return@withContext Result.success(tourneeData ?: TourneeResponse(false, null, "Empty response"))
                    }
                    response.code() == 401 -> {
                        Log.w(TAG, "üîÑ Token expirado (401) - Limpiando y reintentando...")
                        tokenManager.clearTokens() // Forzar nuevo login
                        
                        if (attempt < maxRetries) {
                            attempt++
                            Log.d(TAG, "üîÑ Reintentando tourn√©e (intento $attempt)...")
                            continue // Retry con nuevo token
                        } else {
                            Log.e(TAG, "‚ùå M√°ximo de reintentos alcanzado")
                            return@withContext Result.failure(Exception("Authentication failed after $maxRetries retries"))
                        }
                    }
                    else -> {
                        val errorBody = response.errorBody()?.string()
                        Log.e(TAG, "‚ùå Tourn√©e request fall√≥: ${response.code()} - $errorBody")
                        return@withContext Result.failure(Exception("Tourn√©e failed: ${response.code()} - $errorBody"))
                    }
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error en tourn√©e (intento $attempt): ${e.message}", e)
                
                if (attempt < maxRetries) {
                    attempt++
                    Log.d(TAG, "üîÑ Reintentando tourn√©e por error (intento $attempt)...")
                    continue
                } else {
                    return@withContext Result.failure(e)
                }
            }
        }
        
        Result.failure(Exception("Max retries exceeded"))
    }
    
    /**
     * üöö TOURN√âE TRADICIONAL (compatibilidad)
     */
    suspend fun getTourneeUpdated(
        username: String,
        password: String,
        societe: String,
        date: String,
        matricule: String
    ): Result<TourneeResponse> = withContext(Dispatchers.IO) {
        
        try {
            Log.d(TAG, "üöö === OBTENIENDO TOURN√âE UPDATED ===")
            
            val tourneeRequest = TourneeRequest(
                username = username,
                password = password,
                societe = societe,
                date = date,
                matricule = matricule
            )
            
            val activityId = UUID.randomUUID().toString()
            val response = api.getTourneeUpdated(tourneeRequest, activityId)
            
            if (response.isSuccessful) {
                val tourneeData = response.body()
                Log.d(TAG, "‚úÖ Tourn√©e updated obtenido exitosamente")
                Result.success(tourneeData ?: TourneeResponse(false, null, "Empty response"))
            } else {
                val errorBody = response.errorBody()?.string()
                Log.e(TAG, "‚ùå Tourn√©e updated fall√≥: ${response.code()} - $errorBody")
                Result.failure(Exception("Tourn√©e updated failed: ${response.code()}"))
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error en tourn√©e updated: ${e.message}", e)
            Result.failure(e)
        }
    }
    
    /**
     * üëã LOGOUT - Limpiar tokens
     */
    suspend fun logout() = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üëã === LOGOUT ===")
            tokenManager.clearTokens()
            Log.d(TAG, "‚úÖ Logout completado - tokens eliminados")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error en logout: ${e.message}", e)
        }
    }
    
    /**
     * üîç VERIFICAR SI USUARIO EST√Å LOGUEADO
     */
    suspend fun isUserLoggedIn(): Boolean = withContext(Dispatchers.IO) {
        try {
            val isLoggedIn = tokenManager.isUserLoggedIn()
            Log.d(TAG, "üîç Usuario logueado: $isLoggedIn")
            isLoggedIn
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error verificando login: ${e.message}", e)
            false
        }
    }
    
    /**
     * üìä OBTENER ESTADO COMPLETO DE TOKENS
     */
    suspend fun getTokenStatus(): ColisTokenManager.TokenStatus = withContext(Dispatchers.IO) {
        try {
            val status = tokenManager.getTokenStatus()
            status.logStatus()
            status
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error obteniendo estado de tokens: ${e.message}", e)
            ColisTokenManager.TokenStatus()
        }
    }
    
    /**
     * üè• HEALTH CHECK DEL BACKEND
     */
    suspend fun healthCheck(): Result<Map<String, Any>> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üè• === HEALTH CHECK ===")
            val response = api.healthCheck()
            
            if (response.isSuccessful) {
                val healthData = response.body()
                Log.d(TAG, "‚úÖ Health check exitoso: $healthData")
                Result.success(healthData ?: emptyMap())
            } else {
                Log.e(TAG, "‚ùå Health check fall√≥: ${response.code()}")
                Result.failure(Exception("Health check failed: ${response.code()}"))
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error en health check: ${e.message}", e)
            Result.failure(e)
        }
    }
}
