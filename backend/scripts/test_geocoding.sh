#!/bin/bash

# üó∫Ô∏è Script de prueba para el servicio de geocoding
# Este script prueba los endpoints de geocoding del backend

set -e

# Configuraci√≥n
BASE_URL="http://localhost:3000"
GEOCODING_ENDPOINT="$BASE_URL/api/geocoding"
BATCH_GEOCODING_ENDPOINT="$BASE_URL/api/geocoding/batch"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üó∫Ô∏è PRUEBA DEL SERVICIO DE GEOCODING${NC}"
echo "=================================="
echo ""

# Funci√≥n para hacer requests con curl
make_request() {
    local url="$1"
    local data="$2"
    local description="$3"
    
    echo -e "${YELLOW}üì° Probando: $description${NC}"
    echo "URL: $url"
    echo "Data: $data"
    echo ""
    
    response=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d "$data" \
        "$url")
    
    http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
    body=$(echo "$response" | sed '/HTTP_CODE:/d')
    
    echo -e "${BLUE}üìÑ Respuesta:${NC}"
    echo "$body" | jq . 2>/dev/null || echo "$body"
    echo ""
    echo -e "${BLUE}üìä Status Code: $http_code${NC}"
    echo ""
    
    if [ "$http_code" -eq 200 ]; then
        echo -e "${GREEN}‚úÖ √âXITO${NC}"
    else
        echo -e "${RED}‚ùå ERROR${NC}"
    fi
    echo "----------------------------------"
    echo ""
}

# Verificar que el servidor est√© corriendo
echo -e "${YELLOW}üîç Verificando que el servidor est√© corriendo...${NC}"
if ! curl -s "$BASE_URL" > /dev/null; then
    echo -e "${RED}‚ùå Error: El servidor no est√° corriendo en $BASE_URL${NC}"
    echo "Por favor, inicia el servidor con: cargo run"
    exit 1
fi
echo -e "${GREEN}‚úÖ Servidor corriendo${NC}"
echo ""

# Test 1: Geocoding de una sola direcci√≥n
echo -e "${BLUE}üß™ TEST 1: Geocoding de una sola direcci√≥n${NC}"
make_request "$GEOCODING_ENDPOINT" \
    '{"address": "15 Rue de la Paix, 75001 Paris"}' \
    "Geocoding de Rue de la Paix, Par√≠s"

# Test 2: Geocoding de direcci√≥n con caracteres especiales
echo -e "${BLUE}üß™ TEST 2: Geocoding con caracteres especiales${NC}"
make_request "$GEOCODING_ENDPOINT" \
    '{"address": "42 Avenue des Champs-√âlys√©es, 75008 Paris"}' \
    "Geocoding de Champs-√âlys√©es, Par√≠s"

# Test 3: Geocoding de direcci√≥n inexistente
echo -e "${BLUE}üß™ TEST 3: Geocoding de direcci√≥n inexistente${NC}"
make_request "$GEOCODING_ENDPOINT" \
    '{"address": "Direcci√≥n que no existe 12345"}' \
    "Geocoding de direcci√≥n inexistente"

# Test 4: Geocoding con direcci√≥n vac√≠a
echo -e "${BLUE}üß™ TEST 4: Geocoding con direcci√≥n vac√≠a${NC}"
make_request "$GEOCODING_ENDPOINT" \
    '{"address": ""}' \
    "Geocoding con direcci√≥n vac√≠a"

# Test 5: Batch geocoding
echo -e "${BLUE}üß™ TEST 5: Batch geocoding${NC}"
make_request "$BATCH_GEOCODING_ENDPOINT" \
    '{
        "addresses": [
            "15 Rue de la Paix, 75001 Paris",
            "42 Avenue des Champs-√âlys√©es, 75008 Paris",
            "8 Rue de Rivoli, 75004 Paris"
        ]
    }' \
    "Batch geocoding de 3 direcciones de Par√≠s"

# Test 6: Batch geocoding con muchas direcciones (l√≠mite)
echo -e "${BLUE}üß™ TEST 6: Batch geocoding con l√≠mite${NC}"
addresses_json='{"addresses": ['
for i in {1..51}; do
    if [ $i -gt 1 ]; then
        addresses_json+=","
    fi
    addresses_json+="\"Direcci√≥n de prueba $i, Par√≠s\""
done
addresses_json+="]}"

make_request "$BATCH_GEOCODING_ENDPOINT" \
    "$addresses_json" \
    "Batch geocoding con 51 direcciones (deber√≠a fallar por l√≠mite)"

# Test 7: Batch geocoding vac√≠o
echo -e "${BLUE}üß™ TEST 7: Batch geocoding vac√≠o${NC}"
make_request "$BATCH_GEOCODING_ENDPOINT" \
    '{"addresses": []}' \
    "Batch geocoding con lista vac√≠a"

echo -e "${GREEN}üéâ PRUEBAS COMPLETADAS${NC}"
echo ""
echo -e "${BLUE}üìã RESUMEN:${NC}"
echo "- Se probaron 7 casos diferentes"
echo "- Geocoding individual y en lote"
echo "- Manejo de errores y casos l√≠mite"
echo "- Validaci√≥n de l√≠mites de la API"
echo ""
echo -e "${YELLOW}üí° NOTA:${NC}"
echo "Aseg√∫rate de tener configurado el token de Mapbox:"
echo "export MAPBOX_TOKEN=tu_token_aqui"
echo ""
