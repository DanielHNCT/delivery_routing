#!/bin/bash

# üöÄ SCRIPT PARA PROBAR VALIDACI√ìN INTELIGENTE EN RASPBERRY PI 5
# ================================================================

echo "üîç =========================================="
echo "üîç PRUEBA DE VALIDACI√ìN EN RASPBERRY PI 5"
echo "üîç =========================================="

# Configuraci√≥n
PI_HOST="192.168.1.100"  # ‚ö†Ô∏è CAMBIAR POR LA IP REAL DEL PI
PI_PORT="3000"
ENDPOINT="http://${PI_HOST}:${PI_PORT}"

echo ""
echo "üéØ Configuraci√≥n:"
echo " Host: $PI_HOST"
echo " Puerto: $PI_PORT"
echo " Endpoint: $ENDPOINT"
echo ""

# Verificar conectividad
echo "üîå PASO 1: Verificar conectividad con Raspberry Pi..."
if curl -s --connect-timeout 5 "$ENDPOINT/health" > /dev/null; then
    echo "‚úÖ Raspberry Pi conectado correctamente"
else
    echo "‚ùå No se puede conectar al Raspberry Pi en $ENDPOINT"
    echo "   Verifica que:"
    echo "   1. El Pi est√© encendido y conectado a la red"
    echo "   2. El backend est√© corriendo en el puerto $PI_PORT"
    echo "   3. La IP $PI_HOST sea correcta"
    exit 1
fi

echo ""
echo "üîê PASO 2: Autenticaci√≥n con Colis Priv√©..."
AUTH_RESPONSE=$(curl -s -X POST "$ENDPOINT/api/colis-prive/auth" \
  -H "Content-Type: application/json" \
  -d '{
    "societe": "PCP0010699",
    "username": "A187518"
  }')

if echo "$AUTH_RESPONSE" | jq -e '.success' > /dev/null; then
    echo "‚úÖ Autenticaci√≥n exitosa"
    TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.authentication.token')
    echo "üîë Token obtenido: ${TOKEN:0:20}..."
else
    echo "‚ùå Error en autenticaci√≥n:"
    echo "$AUTH_RESPONSE" | jq '.'
    exit 1
fi

echo ""
echo "üöö PASO 3: Obtener paquetes con validaci√≥n inteligente..."
PACKAGES_RESPONSE=$(curl -s -X POST "$ENDPOINT/api/colis-prive/packages" \
  -H "Content-Type: application/json" \
  -d '{
    "matricule": "A187518",
    "date": "2025-09-01"
  }')

if echo "$PACKAGES_RESPONSE" | jq -e '.success' > /dev/null; then
    echo "‚úÖ Paquetes obtenidos exitosamente"
    
    # Extraer informaci√≥n de validaci√≥n
    VALIDATION_INFO=$(echo "$PACKAGES_RESPONSE" | jq '.address_validation')
    
    if [ "$VALIDATION_INFO" != "null" ]; then
        echo ""
        echo "üìä =========================================="
        echo "üìä RESULTADOS DE VALIDACI√ìN INTELIGENTE"
        echo "üìä =========================================="
        
        TOTAL=$(echo "$VALIDATION_INFO" | jq '.total_packages')
        AUTO_VALIDATED=$(echo "$VALIDATION_INFO" | jq '.auto_validated')
        CLEANED_AUTO=$(echo "$VALIDATION_INFO" | jq '.cleaned_auto')
        COMPLETED_AUTO=$(echo "$VALIDATION_INFO" | jq '.completed_auto')
        PARTIAL_FOUND=$(echo "$VALIDATION_INFO" | jq '.partial_found')
        REQUIRES_MANUAL=$(echo "$VALIDATION_INFO" | jq '.requires_manual')
        
        echo "üì¶ Total de paquetes: $TOTAL"
        echo "‚úÖ Auto-validados (original): $AUTO_VALIDATED"
        echo "üßπ Limpiados autom√°ticamente: $CLEANED_AUTO"
        echo "üîß Completados con sector: $COMPLETED_AUTO"
        echo "üîç Encontrados parcialmente: $PARTIAL_FOUND"
        echo "‚ö†Ô∏è Requieren intervenci√≥n manual: $REQUIRES_MANUAL"
        
        # Calcular porcentajes
        if [ "$TOTAL" -gt 0 ]; then
            AUTO_PERCENT=$(( (AUTO_VALIDATED + CLEANED_AUTO + COMPLETED_AUTO) * 100 / TOTAL ))
            MANUAL_PERCENT=$(( REQUIRES_MANUAL * 100 / TOTAL ))
            
            echo ""
            echo "üìà =========================================="
            echo "üìà ESTAD√çSTICAS DE EFICIENCIA"
            echo "üìà =========================================="
            echo "üéØ Validaci√≥n autom√°tica: $AUTO_PERCENT%"
            echo "‚ö†Ô∏è Intervenci√≥n manual: $MANUAL_PERCENT%"
            
            if [ "$AUTO_PERCENT" -ge 80 ]; then
                echo "üöÄ ¬°EXCELENTE! M√°s del 80% de validaci√≥n autom√°tica"
            elif [ "$AUTO_PERCENT" -ge 60 ]; then
                echo "‚úÖ BUENO: M√°s del 60% de validaci√≥n autom√°tica"
            elif [ "$AUTO_PERCENT" -ge 40 ]; then
                echo "‚ö†Ô∏è REGULAR: Menos del 60% de validaci√≥n autom√°tica"
            else
                echo "‚ùå NECESITA MEJORAS: Menos del 40% de validaci√≥n autom√°tica"
            fi
        fi
        
        # Mostrar warnings si los hay
        WARNINGS=$(echo "$VALIDATION_INFO" | jq -r '.warnings[]?' 2>/dev/null)
        if [ -n "$WARNINGS" ]; then
            echo ""
            echo "‚ö†Ô∏è =========================================="
            echo "‚ö†Ô∏è WARNINGS DE VALIDACI√ìN"
            echo "‚ö†Ô∏è =========================================="
            echo "$WARNINGS"
        fi
        
    else
        echo "‚ö†Ô∏è No hay informaci√≥n de validaci√≥n disponible"
        echo "   Esto puede indicar que:"
        echo "   1. El token de Mapbox no est√° configurado"
        echo "   2. La validaci√≥n no se est√° ejecutando"
        echo "   3. Hay un error en la integraci√≥n"
    fi
    
    echo ""
    echo "üì¶ =========================================="
    echo "üì¶ MUESTRA DE PAQUETES VALIDADOS"
    echo "üì¶ =========================================="
    echo "Mostrando primeros 3 paquetes con informaci√≥n de validaci√≥n:"
    
    echo "$PACKAGES_RESPONSE" | jq '.packages[0:3][] | {
        id: .id,
        tracking_number: .tracking_number,
        address: .address,
        latitude: .latitude,
        longitude: .longitude,
        formatted_address: .formatted_address,
        validation_method: .validation_method,
        validation_confidence: .validation_confidence,
        validation_warnings: .validation_warnings
    }'
    
else
    echo "‚ùå Error obteniendo paquetes:"
    echo "$PACKAGES_RESPONSE" | jq '.'
    exit 1
fi

echo ""
echo "‚úÖ SCRIPT COMPLETADO"
echo "=========================================="
echo ""
echo "üéØ PR√ìXIMOS PASOS:"
echo "1. Si la validaci√≥n no funciona, verificar MAPBOX_TOKEN en el Pi"
echo "2. Revisar logs del backend en el Raspberry Pi"
echo "3. Optimizar regex basado en patrones reales encontrados"
echo "4. Implementar cache de coordenadas para mejorar rendimiento"
