# üöÄ PROMPT PARA ANDROID - INTEGRACI√ìN CON BACKEND LOCAL

## üéØ OBJETIVO PRINCIPAL:

**Android DEBE usar tu backend local** para que puedas **optimizar las rutas** de entrega. La app no es solo para autenticaci√≥n, sino para **optimizaci√≥n inteligente de rutas**.

## ‚ùå PROBLEMA ACTUAL:

Android est√° yendo **directamente a Colis Priv√©**:
```
Android ‚Üí https://wsauthentificationexterne.colisprive.com (EXTERNO)
```

## ‚úÖ SOLUCI√ìN REQUERIDA:

Android debe ir **a trav√©s de tu backend**:
```
Android ‚Üí http://localhost:3000/api/colis-prive/auth ‚Üí Colis Priv√© ‚Üí Respuesta Optimizada
```

## üîß IMPLEMENTACI√ìN REQUERIDA:

### 1. CAMBIAR URLs EN ANDROID:

```kotlin
// ‚ùå CONFIGURACI√ìN ACTUAL (INCORRECTA):
class ColisApiConfig {
    companion object {
        const val BASE_URL = "https://wsauthentificationexterne.colisprive.com"
        const val AUTH_ENDPOINT = "/api/auth/login/Membership"
    }
}

// ‚úÖ CONFIGURACI√ìN CORREGIDA:
class ColisApiConfig {
    companion object {
        // Para desarrollo/emulador
        const val BASE_URL = "http://10.0.2.2:3000"  // localhost del emulador
        // Para dispositivo f√≠sico en misma red
        // const val BASE_URL = "http://192.168.1.XXX:3000"  // IP de tu m√°quina
        
        const val AUTH_ENDPOINT = "/api/colis-prive/auth"
        const val TOURNEE_ENDPOINT = "/api/colis-prive/mobile-tournee-updated"
    }
}
```

### 2. ACTUALIZAR ENDPOINTS:

```kotlin
// ‚ùå ENDPOINTS ACTUALES (DIRECTOS A COLIS PRIV√â):
const val AUTH_URL = "https://wsauthentificationexterne.colisprive.com/api/auth/login/Membership"
const val TOURNEE_URL = "https://wstournee-v2.colisprive.com/WS-TourneeColis/api/getListTourneeMobileByMatriculeDistributeurDateDebut_POST"

// ‚úÖ ENDPOINTS CORREGIDOS (A TRAV√âS DE TU BACKEND):
const val AUTH_URL = "http://10.0.2.2:3000/api/colis-prive/auth"
const val TOURNEE_URL = "http://10.0.2.2:3000/api/colis-prive/mobile-tournee-updated"
```

### 3. CONFIGURACI√ìN DE ENTORNO:

```kotlin
// Agregar configuraci√≥n de entorno
object EnvironmentConfig {
    enum class Environment {
        DEVELOPMENT,  // Usa tu backend local
        PRODUCTION   // Usa Colis Priv√© directo (si es necesario)
    }
    
    val currentEnvironment = Environment.DEVELOPMENT
    
    fun getBaseUrl(): String {
        return when (currentEnvironment) {
            Environment.DEVELOPMENT -> "http://10.0.2.2:3000"
            Environment.PRODUCTION -> "https://wsauthentificationexterne.colisprive.com"
        }
    }
}
```

### 4. ACTUALIZAR CLIENTE HTTP:

```kotlin
// En ColisHttpClient o similar
class ColisHttpClient {
    private val baseUrl = EnvironmentConfig.getBaseUrl()
    
    suspend fun authenticate(request: ColisLoginRequest): ColisLoginResponse {
        val url = if (EnvironmentConfig.currentEnvironment == Environment.DEVELOPMENT) {
            "$baseUrl/api/colis-prive/auth"  // Tu backend
        } else {
            "$baseUrl/api/auth/login/Membership"  // Colis Priv√© directo
        }
        
        return client.post(url) {
            // ... resto del c√≥digo
        }
    }
}
```

## üì± ARCHIVOS A MODIFICAR:

1. **ColisApiConfig.kt** - URLs base y endpoints
2. **ColisHttpClient.kt** - Cliente HTTP
3. **ColisRepository.kt** - L√≥gica de repositorio
4. **build.gradle** - Configuraci√≥n de red (si es necesario)

## üåê CONFIGURACI√ìN DE RED:

### Para Emulador:
```kotlin
const val BASE_URL = "http://10.0.2.2:3000"  // localhost del emulador
```

### Para Dispositivo F√≠sico:
```kotlin
const val BASE_URL = "http://192.168.1.XXX:3000"  // IP de tu m√°quina en la red local
```

### Para Producci√≥n:
```kotlin
const val BASE_URL = "https://tu-dominio.com"  // Tu servidor en producci√≥n
```

## üéØ BENEFICIOS DE LA INTEGRACI√ìN:

### ‚úÖ **Optimizaci√≥n de Rutas:**
- Tu backend puede **procesar y optimizar** las rutas antes de enviarlas a Android
- **Algoritmos de optimizaci√≥n** personalizados
- **An√°lisis de tr√°fico** y **condiciones de carretera**

### ‚úÖ **Cach√© Inteligente:**
- **Almacenamiento local** de datos frecuentes
- **Reducci√≥n de llamadas** a Colis Priv√©
- **Mejor rendimiento** de la app

### ‚úÖ **Analytics y Monitoreo:**
- **Tracking de entregas** en tiempo real
- **M√©tricas de rendimiento** del conductor
- **Reportes personalizados**

### ‚úÖ **Flexibilidad:**
- **Cambios de configuraci√≥n** sin actualizar la app
- **A/B testing** de algoritmos de optimizaci√≥n
- **Integraci√≥n** con otros servicios

## üöÄ FLUJO COMPLETO DESEADO:

```
1. Android ‚Üí Tu Backend (/api/colis-prive/auth)
2. Tu Backend ‚Üí Colis Priv√© (con flujo completo)
3. Colis Priv√© ‚Üí Tu Backend (respuesta)
4. Tu Backend ‚Üí Procesa y optimiza datos
5. Tu Backend ‚Üí Android (datos optimizados)
```

## üìã RESUMEN:

**Android DEBE usar tu backend local** para que puedas:
- ‚úÖ **Optimizar rutas** de entrega
- ‚úÖ **Procesar datos** antes de enviarlos
- ‚úÖ **Implementar algoritmos** de optimizaci√≥n
- ‚úÖ **Crear valor agregado** en la app

**No es solo autenticaci√≥n - es OPTIMIZACI√ìN INTELIGENTE DE RUTAS.** üéØ

---

**¬°La app debe ser un sistema inteligente de optimizaci√≥n, no solo un cliente de Colis Priv√©!**
